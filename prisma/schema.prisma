generator client {
  provider        = "prisma-client"
  output          = "./generated"
  moduleFormat    = "esm"
  previewFeatures = ["typedSql"]
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(ulid())
  email    String @unique
  password String
  /// [UserData]
  data     Json

  completions Completion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Exercise {
  id              String  @id @default(ulid())
  name            String
  weekNumber      Int?
  buddhismConcept String?
  pillarType      String?
  /// [ExerciseMetadata]
  metadata        Json?

  steps       ExerciseStep[]
  completions Completion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ExerciseStepType {
  static
  aiPrompt
}

enum ResponseType {
  text
  shortPhrase
  statement
  ikigaiGrid
  multiPrompt
  questionnaire
  categorization
  narrative
  pillars
}

model ExerciseStep {
  id                  String           @id @default(ulid())
  exerciseId          String
  order               Int
  type                ExerciseStepType
  title               String           @default("Step")
  description         String           @default("") @db.Text
  /// [ExercisePrompts]
  prompts             Json?
  /// [QuestionSet]
  questionSet         Json?
  /// [WorksheetTemplates]
  worksheetTemplates  Json?
  /// [InstructionSections]
  instructionSections Json?
  /// [Resources]
  resources           Json?
  /// [AIPrompts]
  aiPrompts           Json?
  responseType        ResponseType     @default(text)
  groupSharing        Boolean          @default(false)

  exercise Exercise         @relation(fields: [exerciseId], references: [id])
  steps    CompletionStep[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([exerciseId])
}

model Completion {
  id         String @id @default(ulid())
  userId     String
  exerciseId String

  user     User             @relation(fields: [userId], references: [id])
  exercise Exercise         @relation(fields: [exerciseId], references: [id])
  steps    CompletionStep[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([exerciseId])
}

model CompletionStep {
  id             String  @id @default(ulid())
  exerciseStepId String
  completionId   String
  /// [StepResponses]
  responses      Json?
  completed      Boolean @default(false)

  completion   Completion   @relation(fields: [completionId], references: [id])
  exerciseStep ExerciseStep @relation(fields: [exerciseStepId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([completionId])
  @@index([exerciseStepId])
}
